#task to deploy task on specific cluster.
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-image
spec:
  description: >-
    These Tasks are Git tasks to work with repositories used by other tasks
    in your Pipeline.

    The task can be used to deploy image to specified cluster.
  workspaces:
    - name: output
      description: The git repo will be cloned onto the volume backing this Workspace.
    - name: kube-workspace
      description: The kubeconfig file for the cluster will be stored at this Workspace.
  params:
    - name: manifest
      description: Manifest file path.
      type: string
    - name: namespace
      description: Namespace to use for deploying resources.
      type: string
      default: ""
    - name: files
      type: array
      description: A list of files to be applied for deployment. Needs to be relative to the source workspace.
    - name: image
      type: string
      description: The kubectl image to use.
      default: docker.io/bskim45/helm-kubectl-jq:latest
  steps:
    - name: deploy
      image: "$(params.image)"
      args: ["$(params.files[*])"]
      env:
        - name: namespace
          value: $(params.namespace)
      
      script: |
        #!/usr/bin/env sh
        set -eux

        cd $(workspaces.output.path)/$(params.manifest)
        
        export KUBECONFIG="$(workspaces.kube-workspace.path)/kubeconfig"
        
        if [ ${namespace} != "" ] ; then
           
           namespaceStatus=$(kubectl get ns ${namespace} -o json | jq .status.phase -r)
           if [ $namespaceStatus != "Active" ] ; then
              if [ $namespaceStatus == "Terminating" ] ; then
                  echo "namespace in terminating state"
             
                  apk add curl 

                  kubectl proxy 8001 & kubectl get ns ${namespace} -o json | jq "del(.spec.finalizers[0])" > tmp.json; \
                  curl -k -H "Content-Type: application/json" -X PUT --data-binary @"tmp.json" "http://127.0.0.1:8001/api/v1/namespaces/${namespace}/finalize"

              fi

              kubectl create namespace $(params.namespace)
           fi
            
          
          for var in "$@"
          do
              kubectl apply -f "$var" -n $(params.namespace)
          done
          
        else
        
          for var in "$@"
          do
              kubectl apply -f "$var"
          done
        
        fi
        
        
       